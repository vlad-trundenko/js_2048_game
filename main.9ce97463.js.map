{"version":3,"sources":["scripts/main.js"],"names":["score","messageList","document","querySelector","children","messageStart","messageLose","messageWin","start","gameField","showScore","field","addEventListener","e","element","target","classList","value","textContent","i","length","message","contains","add","map","row","column","startGame","r","c","num","updateCell","setInput","setCell","filedCell","remove","removeEventListener","handleInput","loseGame","getRandomInt","max","Math","floor","random","hasEmptyCell","found","key","moveY","moveX","deleteZero","filter","move","line","push","side","reverse"],"mappings":"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","file":"main.9ce97463.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst messageList = document.querySelector('.message-container').children;\r\n\r\nconst messageStart = document.querySelector('.message-start');\r\nconst messageLose = document.querySelector('.message-lose');\r\nconst messageWin = document.querySelector('.message-win');\r\n\r\nconst start = document.querySelector('.start');\r\nconst gameField = document.querySelector('tbody');\r\nconst showScore = document.querySelector('.game-score');\r\n\r\nlet field = [\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n  [0, 0, 0, 0],\r\n];\r\n\r\nlet score;\r\n\r\nstart.addEventListener('click', (e) => {\r\n  const element = e.target;\r\n\r\n  element.classList.value = 'button restart';\r\n  element.textContent = 'Restart';\r\n\r\n  for (let i = 0; i < messageList.length; i++) {\r\n    const message = messageList[i];\r\n\r\n    if (!message.classList.contains('hidden')) {\r\n      message.classList.add('hidden');\r\n    }\r\n  }\r\n\r\n  messageStart.classList.add('hidden');\r\n\r\n  field = field.map(row => row.map(column => 0));\r\n\r\n  score = 0;\r\n  showScore.textContent = score;\r\n\r\n  startGame();\r\n});\r\n\r\nconst startGame = () => {\r\n  for (let r = 0; r < field.length; r++) {\r\n    for (let c = 0; c < field.length; c++) {\r\n      const num = field[r][c];\r\n\r\n      updateCell(r, c, num);\r\n    }\r\n  }\r\n\r\n  setInput();\r\n\r\n  setCell();\r\n  setCell();\r\n};\r\n\r\nconst updateCell = (r, c, num) => {\r\n  const filedCell = gameField.children[r].children[c];\r\n\r\n  filedCell.textContent = '';\r\n  filedCell.classList.value = 'field-cell';\r\n\r\n  if (num > 0) {\r\n    filedCell.textContent = num;\r\n    filedCell.classList.add('field-cell--' + num);\r\n\r\n    if (num === 2048) {\r\n      messageWin.classList.remove('hidden');\r\n\r\n      document.removeEventListener('keydown', handleInput, false);\r\n    }\r\n\r\n    if (loseGame()) {\r\n      messageLose.classList.remove('hidden');\r\n    }\r\n  }\r\n};\r\n\r\nconst setInput = () => document.addEventListener('keydown', handleInput);\r\n\r\nfunction getRandomInt(max) {\r\n  return Math.floor(Math.random() * max);\r\n}\r\n\r\nfunction hasEmptyCell() {\r\n  for (let r = 0; r < field.length; r++) {\r\n    for (let c = 0; c < field.length; c++) {\r\n      if (field[r][c] === 0) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n}\r\n\r\nfunction loseGame() {\r\n  if (hasEmptyCell()) {\r\n    return false;\r\n  }\r\n\r\n  for (let r = 0; r < field.length - 1; r++) {\r\n    for (let c = 0; c < field.length; c++) {\r\n      if (field[r][c] === field[r + 1][c]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let r = 0; r < field.length; r++) {\r\n    for (let c = 0; c < field.length - 1; c++) {\r\n      if (field[r][c] === field[r][c + 1]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n\r\nfunction setCell() {\r\n  if (!hasEmptyCell()) {\r\n    return;\r\n  }\r\n\r\n  let found = false;\r\n\r\n  while (!found) {\r\n    const r = getRandomInt(field.length);\r\n    const c = getRandomInt(field.length);\r\n\r\n    if (field[r][c] === 0) {\r\n      if (getRandomInt(10) === 0) {\r\n        field[r][c] = 4;\r\n        updateCell(r, c, 4);\r\n      } else {\r\n        field[r][c] = 2;\r\n        updateCell(r, c, 2);\r\n      }\r\n\r\n      found = true;\r\n    }\r\n  }\r\n};\r\n\r\nfunction handleInput(e) {\r\n  switch (e.key) {\r\n    case 'ArrowUp':\r\n    case 'ArrowDown':\r\n      moveY(e.key);\r\n      break;\r\n    case 'ArrowLeft':\r\n    case 'ArrowRight':\r\n      moveX(e.key);\r\n      break;\r\n    default:\r\n      return;\r\n  }\r\n\r\n  setCell();\r\n  showScore.textContent = score;\r\n};\r\n\r\nconst deleteZero = row => row.filter(num => num !== 0);\r\n\r\nfunction move(row) {\r\n  let line = deleteZero(row);\r\n\r\n  for (let i = 0; i < line.length; i++) {\r\n    if (line[i] === line[i + 1]) {\r\n      line[i] *= 2;\r\n      line[i + 1] = 0;\r\n      score += row[i];\r\n    }\r\n  }\r\n\r\n  line = deleteZero(line);\r\n\r\n  while (line.length !== field.length) {\r\n    line.push(0);\r\n  }\r\n\r\n  return line;\r\n}\r\n\r\nfunction moveX(side) {\r\n  for (let r = 0; r < field.length; r++) {\r\n    let row = field[r];\r\n\r\n    if (side === 'ArrowRight') {\r\n      row.reverse();\r\n      row = move(row);\r\n      row.reverse();\r\n    } else {\r\n      row = move(row);\r\n    }\r\n\r\n    field[r] = row;\r\n\r\n    for (let c = 0; c < field[r].length; c++) {\r\n      const num = field[r][c];\r\n\r\n      updateCell(r, c, num);\r\n    }\r\n  }\r\n}\r\n\r\nfunction moveY(side) {\r\n  for (let c = 0; c < field.length; c++) {\r\n    let row = field.map(num => num[c]);\r\n\r\n    if (side === 'ArrowDown') {\r\n      row.reverse();\r\n      row = move(row);\r\n      row.reverse();\r\n    } else {\r\n      row = move(row);\r\n    }\r\n\r\n    for (let r = 0; r < field[c].length; r++) {\r\n      field[r][c] = row[r];\r\n\r\n      const num = field[r][c];\r\n\r\n      updateCell(r, c, num);\r\n    }\r\n  }\r\n}\r\n"]}